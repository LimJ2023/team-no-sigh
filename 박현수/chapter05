//Q1 클래스를 생성할 때 호출하는 "생성자" 는 멤버 변수를 초기화하는 데 사용한다.
//Q2 클래스를 생성하여 메모리에 있는 상태를 "인스턴스" 라 하고 멤버 변수를 다른 말로 "인스턴스 변수" 라고 합니다.
//Q3 "메서드" 는 일반 함수에 객체 지향의 개념을 추가하여, 클래스 내부에 선언하고 클래스 멤버 변수를 사용하여 클래스 기능을 구현합니다.
//Q4 MyDate, MyDateTest 클래스 완성.

//MyDateTest.Java
public class MyDateTest {	
	
	public static void main(String[] args) {
		MyDate date1 = new MyDate(30, 2, 2000);
		System.out.println(date1.isValid( ));
		MyDate date2 = new MyDate(2, 10, 2006);
		System.out.println(date2.isValid( ));
	}
}

//=========================================

//MyDate.Java
import java.util.Calendar;

public class MyDate{
	private int day;
	private int month;
	private int year;
	private boolean isValid = true;
	
	public MyDate(int day, int month, int year) {
		setYear(year);
		setMonth(month);
		setDay(day);
	}
	
	public int getDay() {
		return day;
	}
	
	public void setDay(int day) {
		switch(month) {
		case 1: case 3: case 5: case 7: case 8: case 10: case 12: 
			if(day < 0 || day > 31) {
				isValid = false;
			}else {
				this.day = day;
			}
			break;
		case 4: case 6: case 9: case 11: 
			if(day < 0 || day > 30) {
				isValid = false;
			}else {
				this.day = day;
			}
			break;
		case 2:
			if(( (year % 4 == 0 && year % 100 != 0) || year % 400 == 0)) {
				if(day < 0 || day > 29) {
					isValid = false;
				}else {
					this.day = day;
				}
			}else {
				if(day < 0 || day > 28) {
					isValid = false;
				}else {
					this.day = day;
				}
			}
			break;
		default:
			isValid = false;
		}
	}
	
	public int getMonth() {
		return month;
	}
	
	public void setMonth(int month) {
		if(month < 1 || month > 12) {
			isValid = false;
		}
		else {
			this.month = month;
		}
	}
	
	public int getYear() {
		return year;
	}
	
	public void setYear(int year) {
		if(year > Calendar.getInstance().get(Calendar.YEAR)) {
			isValid = false;
		}else {
			this.year = year;
		}
	}
	
	public String isValid() {
		if(isValid) {
			return "유효한 날짜입니다.";
		}else {
			return "유효하지 않은 날짜입니다.";
		}
	}
}

